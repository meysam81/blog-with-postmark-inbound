import { defineConfig, loadEnv } from "vite";
import { ViteMinifyPlugin } from "vite-plugin-minify";
import tailwindcss from "@tailwindcss/vite";
import vue from "@vitejs/plugin-vue";
import { visualizer } from "rollup-plugin-visualizer";
import path from "path";

export default defineConfig(function configureVite({ mode }) {
  var env = loadEnv(mode, process.cwd(), "");
  const isProduction = mode === "production";

  return {
    build: {
      minify: isProduction ? "esbuild" : false,
      sourcemap: isProduction ? false : true,
      target: "esnext",
      cssCodeSplit: true,
      assetsInlineLimit: 4096,
      rollupOptions: {
        output: {
          manualChunks: {
            vendor: ["vue"],
            ui: ["@tailwindcss/vite"]
          },
          chunkFileNames: "assets/js/[name]-[hash].js",
          entryFileNames: "assets/js/[name]-[hash].js",
          assetFileNames: "assets/[ext]/[name]-[hash].[ext]"
        }
      },
      reportCompressedSize: false,
      chunkSizeWarningLimit: 1000
    },
    server: {
      host: "::",
      port: env.PORT || 8080,
      strictPort: true,
      proxy: {
        "/api": {
          target: "http://localhost:8000",
          changeOrigin: true,
          secure: false
        }
      }
    },
    preview: {
      port: env.PREVIEW_PORT || 4173,
      host: "::",
      strictPort: true
    },
    resolve: {
      alias: {
        "@": path.resolve(__dirname, "./src"),
      },
    },
    define: {
      __VUE_OPTIONS_API__: true,
      __VUE_PROD_DEVTOOLS__: false,
      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: false
    },
    plugins: [
      vue({
        template: {
          compilerOptions: {
            isCustomElement: (tag) => tag.startsWith('custom-')
          }
        }
      }),
      tailwindcss(),
      ...(isProduction ? [ViteMinifyPlugin({})] : []),
      ...(process.env.ANALYZE ? [visualizer({
        filename: "dist/stats.html",
        open: true,
        gzipSize: true
      })] : [])
    ],
    esbuild: {
      drop: isProduction ? ["console", "debugger"] : []
    },
    css: {
      devSourcemap: !isProduction
    }
  };
});
